#+TITLE: the Lifetime of an IO Request 
* An Example
#+BEGIN_QUOTE
(root): entry_SYSCALL_64_after_hwframe
|
\-entry_SYSCALL_64_after_hwframe
 |
 \-do_syscall_64
  |
  \-__x64_sys_ioctl
   |
   \-sg_ioctl
    |
    \-sg_ioctl_common
     |
     \-sg_new_write.isra.0
      |
      \-sg_common_write.isra.0
       |
       | 在 sg_common_write 到 blk_mq_alloc_request 之间
       | 这个调用被省略了两层调用：
       | sg_common_write -> sg_start_req -> blk_get_request -> blk_mq_alloc_request
       |
       | 传入了一个 request_queue, OP 是 REQ_OP_DRV_OUT : REQ_OP_DRV_IN, flag 是 0
       | 
       | blk_mq_alloc_request:
       | 1. 创建一个 blk_mq_alloc_data 结构；
       | 2. blk_queue_enter: 增加 q->q_usage_counter 计数；
       | 3. __blk_mq_alloc_request 这是真正 alloc request 的地方，稍候展开谈这个函数；
       | 4. 补完 rq (设置 __data_len, __sector, bio, biotail 等 field), 当然我不是很明白
       |    为什么不在 __blk_queue_request 里面一起做了？
       |
       | __blk_mq_alloc_request 做的事情比较多：
       | 1. blk_queue_rq_alloc_time 检查 q 的 queue_flags 是否设置了 QUEUE_FLAG_RQ_ALLOC_TIME；
       |    这会决定是否设置 alloc_time_ns， alloc_time_ns 表示 reqeust 创建的时间。
       | 2. 处理 elevator 一些复杂情况；这部分没有看懂
       | 3. 取软队列(blk_mq_get_ctx)和硬件队列(blk_mq_map_queue)，需要说明 blk_mq_ctx 和
       |    blk_mq_hw_ctx 的意义。
       | 4. blk_mq_get_tag, 这个时候，data 的 flag 加上了 BLK_MQ_REQ_NOWAIT ，已经取得软硬队列。
       |    tags 是一个 bitmap，主要特别之处在与分了不同的 word 的，这样上锁方便一点，另外还可以
       |    resize 。它会记录整个硬件队列深度，一旦满了，无法取得 tag. 队列深度是 block device 
       |    决定的。
       | 5. blk_mq_rq_ctx_init, 正式填充 struct request, 主要要开 CONFIG_BLK_RQ_ALLOC_TIME 
       |    才会记录 alloc_time_ns，并且在这个时候填充 start_time_ns (需要 alloc_time_ns).
       |    硬件队列增加1.
       \-kretprobe_trampoline(blk_mq_alloc_request)
       |  
       |  还在 sg_start_req 中
       |  blk_rq_map_user_iov: 把缓存数据封装成 bio 加入 request 里面。
       |  调用 blk_rq_append_bio.
       |
       \-blk_rq_map_user_iov
       |
       |  此处应该在 blk_execute_rq_nowait 中，但是不知道为什么少了这个调用层次。
       |  这个函数赋值了 rq->part (block_device 的指针)，update_io_ticks 可能不会有写入。
       |
       \-blk_account_io_start
       |
       |  有点奇怪，进入 blk_mq_sched_insert_request 
       |  没有抓到调用 __blk_mq_insert_request ，估计是走了
       |  elevator 的 insert_requests
       |
       \-blk_mq_sched_insert_request
        |
	|  什么是 SRCU-protected structure?
	|  这里为什么有两种锁？
	|  上锁->判断是否 need_run->解锁-> if need_run then run
	|  need_run 的判断条件：
	|  !blk_queue_quiesced && blk_mq_hctx_has_pending
	|  后面一个条件比较好了解，但是前面一个需要查一下什么时候，
	|  队列会被 quiesced (本质上就是设置一个 bit)。
	|
        \-blk_mq_run_hw_queue
         |
	 |  什么时候 blk_mq_hctx_stopped?
	 |  非 async 请求且 hctx 没有 blocking 都直接 get_cpu()
	 |  然后走 __blk_mq_run_hw_queue()
	 |  但凡这里走不同，都走延时队列。
	 |  hctx->run_work 在哪里定义？
	 |
         \-__blk_mq_delay_run_hw_queue
          |  
	  |  很单纯的函数，如果 hctx->flags & BLK_MQ_F_BLOCKING
	  |  会标注 might_sleep()
	  |  然后就是上锁，dispatch_requests.
	  |
          \-__blk_mq_run_hw_queue
           |
	   |  这里有意思的是，如果 __blk_mq_sched_dispatch_requests 
	   |  返回了 EAGAIN，那么会重入 blk_mq_run_hw_queue.
	   |
           \-blk_mq_sched_dispatch_requests
            |
            \-__blk_mq_sched_dispatch_requests
             |                                                              
             | __blk_mq_sched_dispatch_requests -> blk_mq_do_dispatch_sched 
             | -> __blk_mq_do_dispatch_sched -> blk_mq_get_driver_tag       
	     | 
             |                                                              
             \-blk_mq_get_driver_tag
             |
             \-blk_mq_dispatch_rq_list
              |
              \-blk_mq_start_request
              |
	      |  blk_mq_rq_to_pdu 这个函数的逻辑我是真的看不懂。
	      |  
              \-scsi_queue_rq
	       |
               |  这个函数是在 scsi_queue_rq 中，在 scsi_dispatch_cmd 之前
	       |  的 blk_mq_start_request 里面被调用。
	       |  
               \-blk_add_timer
      |
      \-blk_rq_map_user
       |
       \-blk_rq_append_bio
      |
      \-blk_execute_rq_nowait
       |
       \-blk_mq_request_bypass_insert

(root): secondary_startup_64_no_verify
|
\-secondary_startup_64_no_verify
 |
 \-start_secondary
  |
  \-cpu_startup_entry
   |
   \-do_idle
    |
    \-flush_smp_call_function_from_idle
     |
     \-do_softirq
      |
      \-__softirqentry_text_start
       |
       \-blk_done_softirq
        |
        \-blk_complete_reqs
         |
         \-scsi_complete
          |
          \-scsi_finish_command
           |
           \-scsi_io_completion
            |
            \-scsi_end_request
             |
             \-blk_stat_add
             |
             \-blk_account_io_done
             |
             \-__blk_mq_end_request
              |
              \-blk_put_request
              |
              \-sg_rq_end_io
               |
               \-blk_mq_free_request
#+END_QUOTE
