* FLEETING 内存分配

** FLEETING 在堆上分配
*** PERMANENT ~brk()~ 和 ~sbrk()~                                  :brk:sbrk:
    CLOSED: [2021-11-06 六 21:14]
    要理解这两个函数的用处，首先要理解[[file:chap06.org::*内存布局][内存布局]]里面 program break 的内容。

    ~brk()~ 要指定新的 program break 的位置，这里会有个麻烦的地方，如果新的 break 比当前的低，那么这次调用的后果是无定义的，可能会段错误。另外就是这个新位置会四舍五入落在某个内存页的边界。

    ~sbrk()~ 会安全很多，它传入的是需要增加多少内存，如果传入0，那么它会返回当前 program break。
*** PERMANENT ~malloc()~ 和 ~free~                              :malloc:free:
    ~malloc()~ 返回新分配内存起始位置的指针（类型为 ~void*~ ）注意到为了对齐内存， ~malloc()~ 总是以8字节或者16字节为边界分配的。
    
    ~free()~ 一般情况并不会降低 program break，只会将释放的内存加到空闲空间列表里面。

    为什么 ~free()~ 不降低 program break? 原因如下：

    1. 释放的内存大多在堆的中间；
    2. 减少调用 ~sbrk()~ 的次数， ~sbrk()~ 的调用负担很大；
    3. 降低 program break 通常不会有帮助，因为程序倾向持有已分配内存，或者反复释放重新分配；

    ~free()~ 可以接收空指针，这个时候它什么都不干。但是已经被释放的指针再做什么操作都会出错。

    仅当堆顶空间内存「足够」大的时候，glibc 的 ~free()~ 会调用 ~sbrk()~ 降低 program break. 足够的标准由一个我还没有找到的参数控制。

    
