#+TITLE: SCSI 子系统
* 简介
SCSI 在整个 io 的流程中，处于块设备驱动层下面[fn:1]。

#+CAPTION: io 分层
#+NAME: fig:io-level
[[./picts/io-level.png]]

SCSI 系统本身也有分层。

#+CAPTION: SCSI 分层
#+NAME: fig:scsi-level
[[./picts/scsi-level.jpeg]]

顶层是较高层，跟内核交互。中间层也称公共层或同一层。
最后是较低层，代表使适用 SCSI 的物理接口的实际驱动器。

#+CAPTION: SCSI 分层（细分）
#+NAME: fig:scsi-level-detail
[[./picts/scsi-level-1.jpeg]]

在源码中，我们比较关注块设备的源码，在 sd.c 中。

#+CAPTION: SCSI 设备
#+NAME: fig:scsi-dev
[[./picts/scsi-tree.jpeg]]

Linux 使用 <host, channel, id, lun> 定位唯一的 SCSI 设备。

host 对应主机适配器，它连接在主机 I/O 总线上，channel 是 SCSI 信道编号/ SCSI 总线编号，
由主机适配器固件维护。id 为目标节点标识符，lun 为目标节点内的逻辑单元编号。LUN 是 I/O
终点存储设备。
* 较高层
较高层由一组驱动器组成。负责接受上层请求并转换称 SCSI 请求。

我们比较关注的 SCSI 磁盘驱动器由 drivers/scsi/sd.c 实现，调用了 ~register_blkdev~ 将
SCSI 设备注册称块设备。

由两个比较重要的函数：
** ~sd_probe~
这个函数不是 sd 独有的，sd.c 里面由属于 SCSI disk 设备的 ~sd_probe~.

每当新的 SCSI 设备插入，中间层就会调用 ~sd_probe~ ，创建新的 ~scsi_disk~ 结构来表示。
** ~sd_init_command~
这个函数将 ~struct request~ 转换成 SCSI 命令（返回值表示转换的结果）。
* 中间层
这里涉及一些概念：主机总线适配器(HBA).

中间层提供：

1. 低层驱动器注册和错误处理；
2. 较高层和较低层的 SCSI 命令排队；
3. 将较高层传来的命令转换成 SCSI 请求；
4. 接收较低层完成请求之后的响应并同志较高层；
5. 错误和超时处理；
* 较低层
与物理设备连接的特定驱动器。
* 工作流程[fn:2]
** 下发
请求队列调用 SCSI 层的出队函数，到了5.15，这个出队函数是 ~scsi_queue_rq~.

参考文献[fn:2]提及的流程都在 ~scsi_queue_rq~ 中实现了。

1. 取出请求，这里没有看到调用 ~__elv_next_request~(已经改名为 ~elv_next_request~);
2. 构造 SCSI 命令，在 ~scsi_prepare_cmd~ 中实现；
3. 建立 DMA 映射，也在 ~scsi_prepare_cmd~ -> ~scsi_setup_scsi_cmnd~ -> ~scsi_alloc_sgtable~ (改名了)。
   如果不是走 ~blk_rq_is_passthrough~ 这条路线，会走 ~scsi_cmd_to_driver(cmd)-init_command(cmd)~.
   对 sd 来说，就是 ~sd_init_command~ (里面的 ~sd_setup_read_write_cmnd~ 依然会调用 ~scsi_alloc_sgtable~).
4. request dequeue, 文档提及的 ~blk_dequeue_request~ 已经在 a1ce35fa49852db60fc6e268038530be533c5b15
   被删除了。
5. queuecommand, 这是在 ~scsi_dispatch_cmd~ 里面调用的。
** 完成
完成部分,我没有找到 scsi_done 相关的代码,只能从下半段开始看了。
** ~scsi_target_queue_ready~
这个函数里面涉及若干个 scsi 的状态。

~target_blocked~ 会在 ~scsi_set_blocked~ 中设为 ~max_target_blocked~(默认是3，初始化的时候设定的)。
在 ~scsi_finish_command~ 中被置为0，在 ~scsi_target_is_busy~ 中，如果这个值大于0，会被认为 busy.
有意思的是在 ~scsi_target_queue_ready~ 里面，这个值会递减。

~can_queue~ 如果小于等于0，说明没有限制（所以这里面的逻辑才那么混乱）。

~target_bush~ 表示在 LLD 中实际活跃的命令数。
** ~scsi_host_queue_ready~
如果 host 没有 ready ，也可能导致 starved_entry 转移到 host 的 starved_list 上。
** ~scsi_prepare_cmd~
填充 SCSI cmd .
** ~scsi_dispatch_cmd~

* Footnotes

[fn:2] https://yalungdotblog.files.wordpress.com/2012/02/scsie5ad90e7b3bbe7bb9fe79fa5e8af86e680bbe7bb93.pdf 

[fn:1] https://blog.csdn.net/sinat_37817094/article/details/120357371 
